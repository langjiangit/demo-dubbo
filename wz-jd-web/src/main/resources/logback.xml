<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!-- property用来定义变量值的标签，有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。定义变量后，可以使“${}”来使用变量。 -->
    <property name="APP_Name" value="myAppName" />
    <contextName>${APP_Name}</contextName>
    <!--<timestamp>两个属性 key,datePattern;key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。-->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>

    <!--<appender>是<configuration>的子节点，是负责写日志的组件。<appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。-->.
    <!--1.ConsoleAppender: 把日志添加到控制台，有以下子节点：<encoder>：对日志进行格式化。%d表示日期，%thread: 表示线程名%level：日志级别%msg：日志消息%logger: Java类名（含包名，这里设定了36位，若超过36位，包名会精简为类似a.b.c.JavaBean)%line: Java类的行号
    <target>：字符串 System.out 或者 System.err ，默认 System.out ；-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%date [%5p] - %25c [%X][%X{invokeNo}]- %m%n</pattern>
        </encoder>
    </appender>
    <!--2.FileAppender:把日志添加到文件，有以下子节点：<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
    <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<encoder>：对记录事件进行格式化。
    <prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>testFile.log</file>
        <append>true</append>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
    <!--3.RollingFileAppender:滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
    <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
    <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
    <encoder>：对记录事件进行格式化。
    <rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
    <triggeringPolicy >: 告知 RollingFileAppender 何时激活滚动。
    <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
    rollingPolicy：
    TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。有以下子节点：
    <fileNamePattern>:
    必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。 RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
    <maxHistory>:
    可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且 <maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。
    FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：
    <minIndex>:窗口索引最小值
    <maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
    <fileNamePattern >:
    必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
    triggeringPolicy:
    SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知 RollingFileAppender 触发当前活动文件滚动。只有一个节点:
    <maxFileSize>:这是活动文件的大小，默认值是10MB。-->
    <!--<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>-->
    <!--例：按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。-->
    <!--<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>test.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>tests.%i.log.zip</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>3</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>-->
    <!--<filter>:
    过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。返回DENY，日志将立即被抛弃不再经过其他过滤器；返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。
    过滤器被添加到<Appender> 中，为<Appender> 添加一个或多个过滤器后，可以用任意条件对日志进行过滤。<Appender> 有多个过滤器时，按照配置顺序执行。-->
    <!--evelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点：
    <level>:设置过滤级别
    <onMatch>:用于配置符合过滤条件的操作
    <onMismatch>:用于配置不符合过滤条件的操作
    ThresholdFilter： 临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝。-->
    <!--例：将过滤器的日志级别配置为INFO，所有INFO级别的日志交给appender处理，非INFO级别的日志，被过滤掉。-->
    <!--<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>
                %-4relative [%thread] %-5level %logger{30} - %msg%n
            </pattern>
        </encoder>
    </appender>-->
    <!--<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。name:用来指定受此loger约束的某一个包或者具体的某一个类。level:TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF;如果未设置此属性，那么当前loger将会继承上级的级别。-->
    <!--addtivity:是否向上级loger传递打印信息。默认是true。<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。-->
    <logger name="org.springframework.aop" level="debug" addtivity="false"></logger>

    <!--<root>根logger。只有一个level属性;<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。-->
    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>