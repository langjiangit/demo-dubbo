<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wz="http://www.wz/schema/smile"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.wz/schema/smile
        http://www.wz/schema/smile/smile.xsd"
        default-lazy-init = "false">
	<!--<bean id="dependService" class="com.wz.spring.depends.test.service.impl.DependServiceImpl" name="DependService实现">
		<property name="dependDao" ref="dependDao"/>
	</bean>
	<bean id="dependDao" class="com.wz.spring.depends.test.dao.DependDao" name="dao没有实现接口"/>
-->
	<!-- 循环依赖,构造注入 此种情况报异常-->
	<!--<bean id="circleA" class="com.wz.spring.depends.test.circledepend.CircleA">
		<constructor-arg name="b" ref="circleB" />
	</bean>
	<bean id="circleB" class="com.wz.spring.depends.test.circledepend.CircleB">
		<constructor-arg name="a" ref="circleA" />
	</bean>-->
	<!-- 循环依赖,设值注入 -->
	<!--<bean id="circleA" class="com.wz.spring.depends.test.circledepend.CircleA" >
		<property name="b" ref="circleB"></property>
	</bean>
	<bean id="circleB" class="com.wz.spring.depends.test.circledepend.CircleB" >
		<property name="a" ref="circleA"></property>
	</bean>-->
	<!-- 循环依赖,构造和设值注入,在前边的必须采用设值注入 -->
	<!--<bean id="circleA" class="com.wz.spring.depends.test.circledepend.CircleA" >
		<property name="b" ref="circleB"></property>
	</bean>
	<bean id="circleB" class="com.wz.spring.depends.test.circledepend.CircleB" >
		<constructor-arg name="a" ref="circleA" />
	</bean>-->

	<!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
	<!--<dubbo:application name="consumer-of-helloworld-app" />
	&lt;!&ndash; zookeeper注册中心 &ndash;&gt;
	<dubbo:registry  protocol="zookeeper" address="127.0.0.1:2181" />
	&lt;!&ndash; 使用multicast广播注册中心暴露的服务地址 &ndash;&gt;
	&lt;!&ndash;<dubbo:registry address="multicast://10.57.41.19:1234" /> &ndash;&gt;
	 &lt;!&ndash; 生成远程服务代理，可以和本地bean一样使用demoService &ndash;&gt;
	<dubbo:reference id="demoService" interface="com.wz.dubbo.api.DemoService" timeout="10000"/>

	<dubbo:protocol name="dubbo" port="20880" serialization="hessian2"/>-->

	<!-- 同步调用配置 -->
	<!--<wz:reference id="myService" interface="com.wz.dubbo.api.DemoService" address="127.0.0.1:2222"/>-->

	<!-- 异步调用配置 -->
	<!--<wz:reference id="myService" interface="com.wz.dubbo.api.DemoService" address="127.0.0.1:2222" async="true"/>-->

	<!-- 新型异步调用配置 -->
	<wz:reference id="demoService" interface="com.wz.dubbo.api.DemoServiceAsync" address="127.0.0.1:2222"/>

	<!-- 异步回调配置 -->
	<bean id ="demoCallback" class = "com.wz.prodect.callback.NotifyImpl" />
	<wz:reference id="demoService1" interface="com.wz.dubbo.api.IDemoService" address="127.0.0.1:2222">
		<wz:method name="get" async="true" oninvoke="demoCallback.oninvoke" onreturn="demoCallback.onreturn" onthrow="demoCallback.onthrow" />
	</wz:reference>
</beans>